# -*- coding: utf-8 -*-
"""BottleRecog

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oS23axXSRepcpZrtREnKlBOw-D5tw0iJ
"""

import torch
import numpy as np
import matplotlib.pyplot as plt
import torchvision.transforms.functional as F
from PIL import Image
from torchvision.utils import make_grid
from torchvision.io import read_image
from pathlib import Path
from torchvision.utils import draw_bounding_boxes
from torchvision.models.detection import fasterrcnn_resnet50_fpn
from torchvision.transforms.functional import convert_image_dtype

# Bounding box
plt.rcParams["savefig.bbox"] = 'tight'

def show(imgs):
    if not isinstance(imgs, list):
        imgs = [imgs]
    fix, axs = plt.subplots(ncols=len(imgs), squeeze=False)
    for i, img in enumerate(imgs):
        img = img.detach()
        img = F.to_pil_image(img)
        axs[0, i].imshow(np.asarray(img))
        axs[0, i].set(xticklabels=[], yticklabels=[], xticks=[], yticks=[])

# Download imgs
!wget --output-document=bottle_image.jpg http://web.cecs.pdx.edu/~singh/rcyc-web/images/5.JPG
!wget --output-document=can_image.jpg http://web.cecs.pdx.edu/~singh/rcyc-web/images/3.JPG

bottle_int = read_image("bottle_image.jpg")
can_int = read_image("can_image.jpg")

grid = make_grid([bottle_int, can_int])
show(grid)

boxes = torch.tensor([[500, 100, 600, 1000], [210, 150, 750, 1500]], dtype=torch.float)
colors = ["green", "red"]
result = draw_bounding_boxes(grid, boxes, colors=colors, width=5)
show(result)

batch_int = torch.stack([bottle_int, can_int])
batch = convert_image_dtype(batch_int, dtype=torch.float)

model = fasterrcnn_resnet50_fpn(pretrained=True, progress=False)
model = model.eval()

outputs = model(batch)
print(outputs)

score_threshold = .96

objects_with_boxes = [
    draw_bounding_boxes(object_int, boxes=output['boxes'][output['scores'] > score_threshold], colors=colors, width=70)
    for object_int, output in zip(batch_int, outputs)
]

show(objects_with_boxes)